// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from janus-client.djinni

package com.github.helloiampau.janus.generated;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class JanusData {
    public abstract String getString(String key, String fallback);

    public abstract long getInt(String key, long fallback);

    public abstract boolean getBool(String key, boolean fallback);

    public abstract JanusData getObject(String key);

    public abstract ArrayList<JanusData> getList(String key);

    private static final class CppProxy extends JanusData
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        @SuppressWarnings("deprecation")
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public String getString(String key, String fallback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getString(this.nativeRef, key, fallback);
        }
        private native String native_getString(long _nativeRef, String key, String fallback);

        @Override
        public long getInt(String key, long fallback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getInt(this.nativeRef, key, fallback);
        }
        private native long native_getInt(long _nativeRef, String key, long fallback);

        @Override
        public boolean getBool(String key, boolean fallback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getBool(this.nativeRef, key, fallback);
        }
        private native boolean native_getBool(long _nativeRef, String key, boolean fallback);

        @Override
        public JanusData getObject(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getObject(this.nativeRef, key);
        }
        private native JanusData native_getObject(long _nativeRef, String key);

        @Override
        public ArrayList<JanusData> getList(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getList(this.nativeRef, key);
        }
        private native ArrayList<JanusData> native_getList(long _nativeRef, String key);
    }
}
