// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from janus-client.djinni

package com.github.helloiampau.janus.generated;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Plugin {
    public abstract void onEvent(JanusEvent event, Bundle context);

    public abstract void onHangup(String reason);

    public abstract void onClose();

    public abstract void command(String command, Bundle payload);

    public abstract void onOffer(String sdp, Bundle context);

    public abstract void onAnswer(String sdp, Bundle context);

    private static final class CppProxy extends Plugin
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        @SuppressWarnings("deprecation")
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void onEvent(JanusEvent event, Bundle context)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onEvent(this.nativeRef, event, context);
        }
        private native void native_onEvent(long _nativeRef, JanusEvent event, Bundle context);

        @Override
        public void onHangup(String reason)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onHangup(this.nativeRef, reason);
        }
        private native void native_onHangup(long _nativeRef, String reason);

        @Override
        public void onClose()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onClose(this.nativeRef);
        }
        private native void native_onClose(long _nativeRef);

        @Override
        public void command(String command, Bundle payload)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_command(this.nativeRef, command, payload);
        }
        private native void native_command(long _nativeRef, String command, Bundle payload);

        @Override
        public void onOffer(String sdp, Bundle context)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onOffer(this.nativeRef, sdp, context);
        }
        private native void native_onOffer(long _nativeRef, String sdp, Bundle context);

        @Override
        public void onAnswer(String sdp, Bundle context)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onAnswer(this.nativeRef, sdp, context);
        }
        private native void native_onAnswer(long _nativeRef, String sdp, Bundle context);
    }
}
