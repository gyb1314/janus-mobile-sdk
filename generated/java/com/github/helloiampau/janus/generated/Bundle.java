// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from janus-client.djinni

package com.github.helloiampau.janus.generated;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Bundle {
    public abstract void setString(String key, String value);

    public abstract String getString(String key, String fallback);

    public abstract void setInt(String key, long value);

    public abstract long getInt(String key, long fallback);

    public abstract void setBool(String key, boolean value);

    public abstract boolean getBool(String key, boolean fallback);

    public abstract void setConstraints(Constraints constraints);

    public abstract Constraints getConstraints();

    public static Bundle create()
    {
        return CppProxy.create();
    }

    private static final class CppProxy extends Bundle
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        @SuppressWarnings("deprecation")
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void setString(String key, String value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setString(this.nativeRef, key, value);
        }
        private native void native_setString(long _nativeRef, String key, String value);

        @Override
        public String getString(String key, String fallback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getString(this.nativeRef, key, fallback);
        }
        private native String native_getString(long _nativeRef, String key, String fallback);

        @Override
        public void setInt(String key, long value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setInt(this.nativeRef, key, value);
        }
        private native void native_setInt(long _nativeRef, String key, long value);

        @Override
        public long getInt(String key, long fallback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getInt(this.nativeRef, key, fallback);
        }
        private native long native_getInt(long _nativeRef, String key, long fallback);

        @Override
        public void setBool(String key, boolean value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setBool(this.nativeRef, key, value);
        }
        private native void native_setBool(long _nativeRef, String key, boolean value);

        @Override
        public boolean getBool(String key, boolean fallback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getBool(this.nativeRef, key, fallback);
        }
        private native boolean native_getBool(long _nativeRef, String key, boolean fallback);

        @Override
        public void setConstraints(Constraints constraints)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setConstraints(this.nativeRef, constraints);
        }
        private native void native_setConstraints(long _nativeRef, Constraints constraints);

        @Override
        public Constraints getConstraints()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getConstraints(this.nativeRef);
        }
        private native Constraints native_getConstraints(long _nativeRef);

        public static native Bundle create();
    }
}
