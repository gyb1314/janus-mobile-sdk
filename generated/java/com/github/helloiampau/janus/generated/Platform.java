// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from janus-client.djinni

package com.github.helloiampau.janus.generated;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Platform {
    public abstract void protocol(Protocol protocol);

    public abstract void pluginFactory(String id, PluginFactory factory);

    public abstract PeerFactory peerFactory();

    public static Platform create(PeerFactory factory)
    {
        return CppProxy.create(factory);
    }

    private static final class CppProxy extends Platform
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        @SuppressWarnings("deprecation")
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void protocol(Protocol protocol)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_protocol(this.nativeRef, protocol);
        }
        private native void native_protocol(long _nativeRef, Protocol protocol);

        @Override
        public void pluginFactory(String id, PluginFactory factory)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_pluginFactory(this.nativeRef, id, factory);
        }
        private native void native_pluginFactory(long _nativeRef, String id, PluginFactory factory);

        @Override
        public PeerFactory peerFactory()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_peerFactory(this.nativeRef);
        }
        private native PeerFactory native_peerFactory(long _nativeRef);

        public static native Platform create(PeerFactory factory);
    }
}
