// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from janus-client.djinni

package com.github.helloiampau.janus.generated;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Peer {
    public abstract void createOffer(Constraints constraints, Bundle context);

    public abstract void createAnswer(Constraints constraints, Bundle context);

    public abstract void setLocalDescription(SdpType type, String sdp);

    public abstract void setRemoteDescription(SdpType type, String sdp);

    public abstract void addIceCandidate(String mid, int index, String sdp);

    public abstract void close();

    private static final class CppProxy extends Peer
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        @SuppressWarnings("deprecation")
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void createOffer(Constraints constraints, Bundle context)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_createOffer(this.nativeRef, constraints, context);
        }
        private native void native_createOffer(long _nativeRef, Constraints constraints, Bundle context);

        @Override
        public void createAnswer(Constraints constraints, Bundle context)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_createAnswer(this.nativeRef, constraints, context);
        }
        private native void native_createAnswer(long _nativeRef, Constraints constraints, Bundle context);

        @Override
        public void setLocalDescription(SdpType type, String sdp)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setLocalDescription(this.nativeRef, type, sdp);
        }
        private native void native_setLocalDescription(long _nativeRef, SdpType type, String sdp);

        @Override
        public void setRemoteDescription(SdpType type, String sdp)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setRemoteDescription(this.nativeRef, type, sdp);
        }
        private native void native_setRemoteDescription(long _nativeRef, SdpType type, String sdp);

        @Override
        public void addIceCandidate(String mid, int index, String sdp)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addIceCandidate(this.nativeRef, mid, index, sdp);
        }
        private native void native_addIceCandidate(long _nativeRef, String mid, int index, String sdp);

        @Override
        public void close()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_close(this.nativeRef);
        }
        private native void native_close(long _nativeRef);
    }
}
