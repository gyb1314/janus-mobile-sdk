// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from janus-client.djinni

package com.github.helloiampau.janus.generated;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class ConstraintsBuilder {
    public abstract ConstraintsBuilder datachannel(boolean enable);

    public abstract ConstraintsBuilder sendAudio(boolean enable);

    public abstract ConstraintsBuilder sendVideo(boolean enable);

    public abstract ConstraintsBuilder receiveAudio(boolean enable);

    public abstract ConstraintsBuilder receiveVideo(boolean enable);

    public abstract ConstraintsBuilder camera(Camera camera);

    public abstract ConstraintsBuilder video(int width, int height, int fps);

    public abstract ConstraintsBuilder sendOnly();

    public abstract ConstraintsBuilder receiveOnly();

    public abstract ConstraintsBuilder none();

    public abstract Constraints build();

    public static ConstraintsBuilder create()
    {
        return CppProxy.create();
    }

    private static final class CppProxy extends ConstraintsBuilder
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        @SuppressWarnings("deprecation")
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public ConstraintsBuilder datachannel(boolean enable)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_datachannel(this.nativeRef, enable);
        }
        private native ConstraintsBuilder native_datachannel(long _nativeRef, boolean enable);

        @Override
        public ConstraintsBuilder sendAudio(boolean enable)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_sendAudio(this.nativeRef, enable);
        }
        private native ConstraintsBuilder native_sendAudio(long _nativeRef, boolean enable);

        @Override
        public ConstraintsBuilder sendVideo(boolean enable)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_sendVideo(this.nativeRef, enable);
        }
        private native ConstraintsBuilder native_sendVideo(long _nativeRef, boolean enable);

        @Override
        public ConstraintsBuilder receiveAudio(boolean enable)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_receiveAudio(this.nativeRef, enable);
        }
        private native ConstraintsBuilder native_receiveAudio(long _nativeRef, boolean enable);

        @Override
        public ConstraintsBuilder receiveVideo(boolean enable)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_receiveVideo(this.nativeRef, enable);
        }
        private native ConstraintsBuilder native_receiveVideo(long _nativeRef, boolean enable);

        @Override
        public ConstraintsBuilder camera(Camera camera)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_camera(this.nativeRef, camera);
        }
        private native ConstraintsBuilder native_camera(long _nativeRef, Camera camera);

        @Override
        public ConstraintsBuilder video(int width, int height, int fps)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_video(this.nativeRef, width, height, fps);
        }
        private native ConstraintsBuilder native_video(long _nativeRef, int width, int height, int fps);

        @Override
        public ConstraintsBuilder sendOnly()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_sendOnly(this.nativeRef);
        }
        private native ConstraintsBuilder native_sendOnly(long _nativeRef);

        @Override
        public ConstraintsBuilder receiveOnly()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_receiveOnly(this.nativeRef);
        }
        private native ConstraintsBuilder native_receiveOnly(long _nativeRef);

        @Override
        public ConstraintsBuilder none()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_none(this.nativeRef);
        }
        private native ConstraintsBuilder native_none(long _nativeRef);

        @Override
        public Constraints build()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_build(this.nativeRef);
        }
        private native Constraints native_build(long _nativeRef);

        public static native ConstraintsBuilder create();
    }
}
