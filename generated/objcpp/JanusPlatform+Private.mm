// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from janus-client.djinni

#import "JanusPlatform+Private.h"
#import "JanusPlatform.h"
#import "JanusPeerFactory+Private.h"
#import "JanusPluginFactory+Private.h"
#import "JanusProtocol+Private.h"
#import "djinni/objc/DJICppWrapperCache+Private.h"
#import "djinni/objc/DJIError.h"
#import "djinni/objc/DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface JanusPlatform ()

- (id)initWithCpp:(const std::shared_ptr<::Janus::Platform>&)cppRef;

@end

@implementation JanusPlatform {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Janus::Platform>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Janus::Platform>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)protocol:(nullable id<JanusProtocol>)protocol {
    try {
        _cppRefHandle.get()->protocol(::djinni_generated::Protocol::toCpp(protocol));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)pluginFactory:(nonnull NSString *)id
              factory:(nullable id<JanusPluginFactory>)factory {
    try {
        _cppRefHandle.get()->pluginFactory(::djinni::String::toCpp(id),
                                           ::djinni_generated::PluginFactory::toCpp(factory));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<JanusPeerFactory>)peerFactory {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->peerFactory();
        return ::djinni_generated::PeerFactory::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable JanusPlatform *)create:(nullable id<JanusPeerFactory>)factory {
    try {
        auto objcpp_result_ = ::Janus::Platform::create(::djinni_generated::PeerFactory::toCpp(factory));
        return ::djinni_generated::Platform::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Platform::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Platform::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<::JanusPlatform>(cpp);
}

}  // namespace djinni_generated

@end
