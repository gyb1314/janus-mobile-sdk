// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from janus-client.djinni

#import "JanusJanus+Private.h"
#import "JanusJanus.h"
#import "JanusBundle+Private.h"
#import "JanusJanusConf+Private.h"
#import "JanusPlatform+Private.h"
#import "JanusProtocolDelegate+Private.h"
#import "djinni/objc/DJICppWrapperCache+Private.h"
#import "djinni/objc/DJIError.h"
#import "djinni/objc/DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface JanusJanus ()

- (id)initWithCpp:(const std::shared_ptr<::Janus::Janus>&)cppRef;

@end

@implementation JanusJanus {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Janus::Janus>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Janus::Janus>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)init {
    try {
        _cppRefHandle.get()->init();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)close {
    try {
        _cppRefHandle.get()->close();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)hangup {
    try {
        _cppRefHandle.get()->hangup();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)dispatch:(nonnull NSString *)command
         payload:(nullable JanusBundle *)payload {
    try {
        _cppRefHandle.get()->dispatch(::djinni::String::toCpp(command),
                                      ::djinni_generated::Bundle::toCpp(payload));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable JanusJanus *)create:(nullable id<JanusJanusConf>)conf
                       platform:(nullable JanusPlatform *)platform
                       delegate:(nullable id<JanusProtocolDelegate>)delegate {
    try {
        auto objcpp_result_ = ::Janus::Janus::create(::djinni_generated::JanusConf::toCpp(conf),
                                                     ::djinni_generated::Platform::toCpp(platform),
                                                     ::djinni_generated::ProtocolDelegate::toCpp(delegate));
        return ::djinni_generated::Janus::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Janus::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Janus::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<::JanusJanus>(cpp);
}

}  // namespace djinni_generated

@end
