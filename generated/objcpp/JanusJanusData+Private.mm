// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from janus-client.djinni

#import "JanusJanusData+Private.h"
#import "JanusJanusData.h"
#import "djinni/objc/DJICppWrapperCache+Private.h"
#import "djinni/objc/DJIError.h"
#import "djinni/objc/DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface JanusJanusData ()

- (id)initWithCpp:(const std::shared_ptr<::Janus::JanusData>&)cppRef;

@end

@implementation JanusJanusData {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Janus::JanusData>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Janus::JanusData>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSString *)getString:(nonnull NSString *)key
                       fallback:(nonnull NSString *)fallback {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getString(::djinni::String::toCpp(key),
                                                             ::djinni::String::toCpp(fallback));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)getInt:(nonnull NSString *)key
         fallback:(int64_t)fallback {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getInt(::djinni::String::toCpp(key),
                                                          ::djinni::I64::toCpp(fallback));
        return ::djinni::I64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)getBool:(nonnull NSString *)key
       fallback:(BOOL)fallback {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getBool(::djinni::String::toCpp(key),
                                                           ::djinni::Bool::toCpp(fallback));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable JanusJanusData *)getObject:(nonnull NSString *)key {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getObject(::djinni::String::toCpp(key));
        return ::djinni_generated::JanusData::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<JanusJanusData *> *)getList:(nonnull NSString *)key {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getList(::djinni::String::toCpp(key));
        return ::djinni::List<::djinni_generated::JanusData>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto JanusData::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto JanusData::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<::JanusJanusData>(cpp);
}

}  // namespace djinni_generated

@end
