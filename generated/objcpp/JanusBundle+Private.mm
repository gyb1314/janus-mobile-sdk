// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from janus-client.djinni

#import "JanusBundle+Private.h"
#import "JanusBundle.h"
#import "JanusConstraints+Private.h"
#import "djinni/objc/DJICppWrapperCache+Private.h"
#import "djinni/objc/DJIError.h"
#import "djinni/objc/DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface JanusBundle ()

- (id)initWithCpp:(const std::shared_ptr<::Janus::Bundle>&)cppRef;

@end

@implementation JanusBundle {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Janus::Bundle>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Janus::Bundle>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)setString:(nonnull NSString *)key
            value:(nonnull NSString *)value {
    try {
        _cppRefHandle.get()->setString(::djinni::String::toCpp(key),
                                       ::djinni::String::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getString:(nonnull NSString *)key
                       fallback:(nonnull NSString *)fallback {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getString(::djinni::String::toCpp(key),
                                                             ::djinni::String::toCpp(fallback));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setInt:(nonnull NSString *)key
         value:(int64_t)value {
    try {
        _cppRefHandle.get()->setInt(::djinni::String::toCpp(key),
                                    ::djinni::I64::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)getInt:(nonnull NSString *)key
         fallback:(int64_t)fallback {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getInt(::djinni::String::toCpp(key),
                                                          ::djinni::I64::toCpp(fallback));
        return ::djinni::I64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setBool:(nonnull NSString *)key
          value:(BOOL)value {
    try {
        _cppRefHandle.get()->setBool(::djinni::String::toCpp(key),
                                     ::djinni::Bool::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)getBool:(nonnull NSString *)key
       fallback:(BOOL)fallback {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getBool(::djinni::String::toCpp(key),
                                                           ::djinni::Bool::toCpp(fallback));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setConstraints:(nonnull JanusConstraints *)constraints {
    try {
        _cppRefHandle.get()->setConstraints(::djinni_generated::Constraints::toCpp(constraints));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull JanusConstraints *)getConstraints {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getConstraints();
        return ::djinni_generated::Constraints::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable JanusBundle *)create {
    try {
        auto objcpp_result_ = ::Janus::Bundle::create();
        return ::djinni_generated::Bundle::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Bundle::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Bundle::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<::JanusBundle>(cpp);
}

}  // namespace djinni_generated

@end
