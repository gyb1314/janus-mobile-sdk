// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from janus-client.djinni

#pragma once

#include "djinni/jni/djinni_support.hpp"
#include "protocol_delegate.hpp"

namespace djinni_generated {

class NativeProtocolDelegate final : ::djinni::JniInterface<::Janus::ProtocolDelegate, NativeProtocolDelegate> {
public:
    using CppType = std::shared_ptr<::Janus::ProtocolDelegate>;
    using CppOptType = std::shared_ptr<::Janus::ProtocolDelegate>;
    using JniType = jobject;

    using Boxed = NativeProtocolDelegate;

    ~NativeProtocolDelegate();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeProtocolDelegate>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeProtocolDelegate>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeProtocolDelegate();
    friend ::djinni::JniClass<NativeProtocolDelegate>;
    friend ::djinni::JniInterface<::Janus::ProtocolDelegate, NativeProtocolDelegate>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::Janus::ProtocolDelegate
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void onReady() override;
        void onClose() override;
        void onError(const ::Janus::JanusError & error, const std::shared_ptr<::Janus::Bundle> & context) override;
        void onEvent(const std::shared_ptr<::Janus::JanusEvent> & event, const std::shared_ptr<::Janus::Bundle> & context) override;
        void onHangup(const std::string & reason) override;

    private:
        friend ::djinni::JniInterface<::Janus::ProtocolDelegate, ::djinni_generated::NativeProtocolDelegate>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/github/helloiampau/janus/generated/ProtocolDelegate") };
    const jmethodID method_onReady { ::djinni::jniGetMethodID(clazz.get(), "onReady", "()V") };
    const jmethodID method_onClose { ::djinni::jniGetMethodID(clazz.get(), "onClose", "()V") };
    const jmethodID method_onError { ::djinni::jniGetMethodID(clazz.get(), "onError", "(Lcom/github/helloiampau/janus/generated/JanusError;Lcom/github/helloiampau/janus/generated/Bundle;)V") };
    const jmethodID method_onEvent { ::djinni::jniGetMethodID(clazz.get(), "onEvent", "(Lcom/github/helloiampau/janus/generated/JanusEvent;Lcom/github/helloiampau/janus/generated/Bundle;)V") };
    const jmethodID method_onHangup { ::djinni::jniGetMethodID(clazz.get(), "onHangup", "(Ljava/lang/String;)V") };
};

}  // namespace djinni_generated
