// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from janus-client.djinni

#pragma once

#include "djinni/jni/djinni_support.hpp"
#include "plugin_factory.hpp"

namespace djinni_generated {

class NativePluginFactory final : ::djinni::JniInterface<::Janus::PluginFactory, NativePluginFactory> {
public:
    using CppType = std::shared_ptr<::Janus::PluginFactory>;
    using CppOptType = std::shared_ptr<::Janus::PluginFactory>;
    using JniType = jobject;

    using Boxed = NativePluginFactory;

    ~NativePluginFactory();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativePluginFactory>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativePluginFactory>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativePluginFactory();
    friend ::djinni::JniClass<NativePluginFactory>;
    friend ::djinni::JniInterface<::Janus::PluginFactory, NativePluginFactory>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::Janus::PluginFactory
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::shared_ptr<::Janus::Plugin> create(int64_t handleId, const std::shared_ptr<::Janus::Protocol> & owner) override;

    private:
        friend ::djinni::JniInterface<::Janus::PluginFactory, ::djinni_generated::NativePluginFactory>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/github/helloiampau/janus/generated/PluginFactory") };
    const jmethodID method_create { ::djinni::jniGetMethodID(clazz.get(), "create", "(JLcom/github/helloiampau/janus/generated/Protocol;)Lcom/github/helloiampau/janus/generated/Plugin;") };
};

}  // namespace djinni_generated
