// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from janus-client.djinni

#include "native_bundle.hpp"  // my header
#include "djinni/jni/Marshal.hpp"
#include "native_constraints.hpp"

namespace djinni_generated {

NativeBundle::NativeBundle() : ::djinni::JniInterface<::Janus::Bundle, NativeBundle>("com/github/helloiampau/janus/generated/Bundle$CppProxy") {}

NativeBundle::~NativeBundle() = default;


CJNIEXPORT void JNICALL Java_com_github_helloiampau_janus_generated_Bundle_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::Janus::Bundle>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_github_helloiampau_janus_generated_Bundle_00024CppProxy_native_1setString(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key, jstring j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Janus::Bundle>(nativeRef);
        ref->setString(::djinni::String::toCpp(jniEnv, j_key),
                       ::djinni::String::toCpp(jniEnv, j_value));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jstring JNICALL Java_com_github_helloiampau_janus_generated_Bundle_00024CppProxy_native_1getString(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key, jstring j_fallback)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Janus::Bundle>(nativeRef);
        auto r = ref->getString(::djinni::String::toCpp(jniEnv, j_key),
                                ::djinni::String::toCpp(jniEnv, j_fallback));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_github_helloiampau_janus_generated_Bundle_00024CppProxy_native_1setInt(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key, jlong j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Janus::Bundle>(nativeRef);
        ref->setInt(::djinni::String::toCpp(jniEnv, j_key),
                    ::djinni::I64::toCpp(jniEnv, j_value));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jlong JNICALL Java_com_github_helloiampau_janus_generated_Bundle_00024CppProxy_native_1getInt(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key, jlong j_fallback)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Janus::Bundle>(nativeRef);
        auto r = ref->getInt(::djinni::String::toCpp(jniEnv, j_key),
                             ::djinni::I64::toCpp(jniEnv, j_fallback));
        return ::djinni::release(::djinni::I64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_github_helloiampau_janus_generated_Bundle_00024CppProxy_native_1setBool(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key, jboolean j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Janus::Bundle>(nativeRef);
        ref->setBool(::djinni::String::toCpp(jniEnv, j_key),
                     ::djinni::Bool::toCpp(jniEnv, j_value));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jboolean JNICALL Java_com_github_helloiampau_janus_generated_Bundle_00024CppProxy_native_1getBool(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key, jboolean j_fallback)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Janus::Bundle>(nativeRef);
        auto r = ref->getBool(::djinni::String::toCpp(jniEnv, j_key),
                              ::djinni::Bool::toCpp(jniEnv, j_fallback));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_github_helloiampau_janus_generated_Bundle_00024CppProxy_native_1setConstraints(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_constraints)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Janus::Bundle>(nativeRef);
        ref->setConstraints(::djinni_generated::NativeConstraints::toCpp(jniEnv, j_constraints));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_github_helloiampau_janus_generated_Bundle_00024CppProxy_native_1getConstraints(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Janus::Bundle>(nativeRef);
        auto r = ref->getConstraints();
        return ::djinni::release(::djinni_generated::NativeConstraints::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_github_helloiampau_janus_generated_Bundle_00024CppProxy_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::Janus::Bundle::create();
        return ::djinni::release(::djinni_generated::NativeBundle::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
